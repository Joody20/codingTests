import sys
sys.stdin = open("input.txt","r")

"""
0 ~ 999999 사이의 수를 나열하여 만든 암호문이 있다.

암호문을 급히 수정해야 할 일이 발생했는데, 이 암호문은 특수 제작된 처리기로만 수정이 가능하다.

이 처리기는 다음과 같이 1개의 기능을 제공한다.

1. I(삽입) x, y, s : 앞에서부터 x의 위치 바로 다음에 y개의 숫자를 삽입한다. s는 덧붙일 숫자들이다.[ ex) I 3 2 123152 487651 ]

위의 규칙에 맞게 작성된 명령어를 나열하여 만든 문자열이 주어졌을 때, 암호문을 수정하고, 수정된 결과의 처음 10개 숫자를 출력하는 프로그램을 작성하여라.

[입력]

첫 번째 줄 : 원본 암호문의 길이 N ( 10 ≤ N ≤ 20 의 정수)

두 번째 줄 : 원본 암호문

세 번째 줄 : 명령어의 개수 ( 5 ≤ N ≤ 10 의 정수)

네 번째 줄 : 명령어

위와 같은 네 줄이 한 개의 테스트 케이스이며, 총 10개의 테스트 케이스가 주어진다.

11
449047 855428 425117 532416 358612 929816 313459 311433 472478 589139 568205 
7
I 1 5 400905 139831 966064 336948 119288 I 8 6 436704 702451 762737 557561 810021 771706 I 3 8 389953 706628 552108 238749 661021 498160 493414 377808 I 13 4 237017 301569 243869 252994 I 3 4 408347 618608 822798 370982 I 8 2 424216 356268 I 4 10 512816 992679 693002 835918 768525 949227 628969 521945 839380 479976 

[출력]

#기호와 함께 테스트 케이스의 번호를 출력하고, 공백 문자 후 수정된 암호문의 처음 10개 항을 출력한다.

#1 449047 400905 139831 408347 512816 992679 693002 835918 768525 949227 
#2 150706 600576 565945 486128 594841 566753 244528 233616 556294 697547 
#3 973313 271510 434200 132826 186343 308937 115088 438559 139738 948108 
#4 505428 811504 426664 713940 855599 655028 878767 259061 870009 141255 
#5 267162 670435 488135 605710 353909 276272 171102 871819 129966 404856 
#6 192530 407162 275094 303667 851080 385930 909225 863939 286381 776616 
#7 136752 320395 397751 875871 683248 246614 942192 856739 914031 556177 
#8 482032 518037 513679 145989 422525 497171 841413 364367 572438 104109 
#9 438278 128145 818986 814573 692305 541108 569934 812165 774081 789114 
#10 596308 376463 344210 520543 173961 644251 888643 787798 136503 153477 
"""

for t in range(1,11):
    N = int(input())
    originals = input().split()
    cmd_N = int(input())
    cmds= input().split()


    idx = 0

    while idx < len(cmds):
        if cmds[idx] == 'I':
            x = int(cmds[idx + 1])  # x
            y = int(cmds[idx + 2])  # y
            s = cmds[idx + 3: idx + 3 + y]  # s
            for i in range(y):  # 앞에서부터 x의 위치 바로 다음에 y개의 숫자를 삽입한다
                originals.insert(x+i, s[i])
            idx += 3 + y
        else:
            idx += 1

    result = " ".join(originals[:10])
    print(f"#{t} {result}")
