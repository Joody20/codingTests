import sys
sys.stdin = open("input.txt","r")


"""
아래 <그림 1>과 같이 정사각형 칸들로 이루어진 사각형 모양의 판이 있고, 그 위에 얇은 치즈(회색으로 표시된 부분)가 놓여 있다. 판의 가장자리(<그림 1>에서 네모 칸에 X친 부분)에는 치즈가 놓여 있지 않으며 치즈에는 하나 이상의 구멍이 있을 수 있다.

이 치즈를 공기 중에 놓으면 녹게 되는데 공기와 접촉된 칸은 한 시간이 지나면 녹아 없어진다. 치즈의 구멍 속에는 공기가 없지만 구멍을 둘러싼 치즈가 녹아서 구멍이 열리면 구멍 속으로 공기가 들어가게 된다. <그림 1>의 경우, 치즈의 구멍을 둘러싼 치즈는 녹지 않고 ‘c’로 표시된 부분만 한 시간 후에 녹아 없어져서 <그림 2>와 같이 된다.



<그림 1> 원래 치즈 모양

다시 한 시간 후에는 <그림 2>에서 ‘c’로 표시된 부분이 녹아 없어져서 <그림 3>과 같이 된다.
<그림 2> 한 시간 후의 치즈 모양
<그림 3> 두 시간 후의 치즈 모양

<그림 3>은 원래 치즈의 두 시간 후 모양을 나타내고 있으며, 남은 조각들은 한 시간이 더 지나면 모두 녹아 없어진다. 그러므로 처음 치즈가 모두 녹아 없어지는 데는 세 시간이 걸린다. <그림 3>과 같이 치즈가 녹는 과정에서 여러 조각으로 나누어 질 수도 있다.

입력으로 사각형 모양의 판의 크기와 한 조각의 치즈가 판 위에 주어졌을 때, 공기 중에서 치즈가 모두 녹아 없어지는 데 걸리는 시간과 모두 녹기 한 시간 전에 남아있는 치즈조각이 놓여 있는 칸의 개수를 구하는 프로그램을 작성하시오.

입력
첫째 줄에는 사각형 모양 판의 세로와 가로의 길이가 양의 정수로 주어진다. 세로와 가로의 길이는 최대 100이다. 판의 각 가로줄의 모양이 윗 줄부터 차례로 둘째 줄부터 마지막 줄까지 주어진다. 치즈가 없는 칸은 0, 치즈가 있는 칸은 1로 주어지며 각 숫자 사이에는 빈칸이 하나씩 있다.

출력
첫째 줄에는 치즈가 모두 녹아서 없어지는 데 걸리는 시간을 출력하고, 둘째 줄에는 모두 녹기 한 시간 전에 남아있는 치즈조각이 놓여 있는 칸의 개수를 출력한다.


예제 1
13 12
0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 1 1 0 0 0
0 1 1 1 0 0 0 1 1 0 0 0
0 1 1 1 1 1 1 0 0 0 0 0
0 1 1 1 1 1 0 1 1 0 0 0
0 1 1 1 1 0 0 1 1 0 0 0
0 0 1 1 0 0 0 1 1 0 0 0
0 0 1 1 1 1 1 1 1 0 0 0
0 0 1 1 1 1 1 1 1 0 0 0
0 0 1 1 1 1 1 1 1 0 0 0
0 0 1 1 1 1 1 1 1 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0

출력 1
3 -> 걸린시간
5 -> 마지막에 남은 치즈의 개수

"""
from collections import deque

N, M = map(int,input().split())
grid = [list(map(int,input().split())) for _ in range(N)]



def BFS():
    visited = [[0]*M for _ in range(N)]  # M * N 으로 해야돼

    queue = deque()
    queue.append((0,0))

    # 녹일 치즈 리스트
    melt_list = []

    while queue:
        x,y = queue.popleft()

        dx = [-1,0,1,0]
        dy = [0,1,0,-1]

        visited[0][0] = 1  # 시작점 방문처리

        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]

            if 0<= nx <N and 0 <= ny < M and not visited[nx][ny]:  # 공기이든, 치즈이든 방문처리는 꼭 해줘야됌.
                if grid[nx][ny] == 0:  # 공기이면, queue에 좌표만 넘겨주고
                    visited[nx][ny] = 1  # 방문처리
                    queue.append((nx,ny))
                elif grid[nx][ny] == 1:  # 치즈이면, 녹일 치즈 리스트에 좌표 넘겨주고
                    visited[nx][ny] = 1 # 방문처리
                    melt_list.append((nx,ny))


    for mx,my in melt_list: # 녹일 치즈 리스트를 이제 grid에 1을 0으로 녹이기 해줘야돼.
        grid[mx][my] = 0

    return len(melt_list)



time = 0
last_cnt = 0
# 치즈가 다 녹을때까지 해야되니까. BFS를 함수로 짜서, 그 함수의 melt_list의 개수가 하나도 없어질때까지 반복할 수 있게끔
while True:
    melted = BFS()
    if melted == 0:
        break

    time += 1
    last_cnt = melted

print(time)
print(last_cnt)


           